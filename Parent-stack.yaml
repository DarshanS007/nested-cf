AWSTemplateFormatVersion: 2010-09-09


Description: Parent Stack which deploys An Application Load balancer with Auto scaling, Vpc is Taken from the child stack uploaded to s3



 #-----------------PARAMETERS-----------------------------------
Parameters:  
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
 
  TemplateURL:      #Geting the child stack url from S3
    Description: url from s3
    Type: String

#------------Mappings----------------------------|

Mappings:       
  RegionMap:
    us-east-1:
     "AMI": "ami-0742b4e673072066f"
    us-west-2:
     "AMI": "ami-0518bb0e75d3619ca"


#--------------Resources----------------|

Resources:
  VPCstack:                 #This is the child stack which is taken from the s3
    Type: AWS::CloudFormation::Stack
    Properties: 
     TemplateURL: !Ref TemplateURL
     TimeoutInMinutes: 60

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !GetAtt  VPCstack.Outputs.VPC

  ELBSecurityGroup: 
    Type: 'AWS::EC2::SecurityGroup'    #ELB security group
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !GetAtt  VPCstack.Outputs.VPC

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'     #WEBSERVER security group 
    Properties:
      GroupDescription: Enable SSH access and HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt
              - ApplicationLoadBalancer
              - SecurityGroups
      VpcId: !GetAtt  VPCstack.Outputs.VPC

  WebServerGroup:
   Type: 'AWS::AutoScaling::AutoScalingGroup'     #Auto scaling 
   Properties:
     AvailabilityZones:
       - !Select [ 0, !GetAZs '' ]
       - !Select [ 1, !GetAZs '' ]
       - !Select [ 2, !GetAZs '' ]
     VPCZoneIdentifier:
       - !GetAtt  VPCstack.Outputs.PublicSubnet1
       - !GetAtt  VPCstack.Outputs.PublicSubnet2
       - !GetAtt  VPCstack.Outputs.PublicSubnet3
     DesiredCapacity: 2
     HealthCheckGracePeriod: 300
     HealthCheckType: ELB
     LaunchTemplate:
       LaunchTemplateId: !Ref MyLaunchTemplate
       Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
     MaxSize: 5
     MinSize: 2
     TargetGroupARNs:
       - !Ref ALBTargetGroup
     Tags:
       - Key: Name
         PropagateAtLaunch: false
         Value: ASG

  MyLaunchTemplate:
   Type: AWS::EC2::LaunchTemplate   #Launch template 
   Properties:
     LaunchTemplateData:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start

  WebServerTargetPolicy:
   Type: AWS::AutoScaling::ScalingPolicy   #Auto scaling policy for to scale up ec2 
   Properties:
     AutoScalingGroupName: !Ref WebServerGroup
     PolicyType: TargetTrackingScaling
     TargetTrackingConfiguration:
       PredefinedMetricSpecification:
         PredefinedMetricType: ASGAverageCPUUtilization
       TargetValue: 50.0

  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
       - !GetAtt  VPCstack.Outputs.PublicSubnet1
       - !GetAtt  VPCstack.Outputs.PublicSubnet2
       - !GetAtt  VPCstack.Outputs.PublicSubnet3

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'     #ALB Listner 
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'  #ALB target group
    Properties: 
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !GetAtt VPCstack.Outputs.VPC
